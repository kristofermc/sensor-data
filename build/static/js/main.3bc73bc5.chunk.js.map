{"version":3,"sources":["ebconfig.js","App.js","reportWebVitals.js","index.js"],"names":["ebconfig","AppDB","props","state","accessToken","results","requestOptions","method","headers","body","JSON","stringify","requestData","Authorization","fetch","then","response","json","data","setState","this","labels","datasets","label","date","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","sensor1","sensor2","sensor3","sensor4","style","textAlign","fontWeight","React","Component","Card","cardStyle","DbResults","useEasybase","db","useReturn","frame","e","return","insertRecord","a","inDate","prompt","inSensor1","inSensor2","inSensor3","inSensor4","insert","one","alert","position","right","top","width","margin","padding","borderRadius","onClick","marginLeft","marginRight","marginTop","marginBottom","display","gridTemplateColumns","gridGap","map","ele","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3bc73bc5.chunk.js","sourcesContent":["/* eslint-disable */\n// WARNING: Do not edit this file\n\nconst ebconfig = {\n  \"integration\": \"react-1-xZWcfans4OKXQH7-bzvYxS4WaFNxwttdJz-YC57GC4DtKMto9stS5Py1xjAxYoalGyReYeSg3DIBPzzg6DDvO6xnOrlZk8AwIc1crj5gdgFeeiwcQDKuDuxr\",\n  \"tt\": \"tt-1-yH3Tz-doTJSmOolqmBQ-aKwEfbGva9-MdOx-iHa1EUI=\",\n  \"version\": \"2020-11-20\"\n}\n\nexport default ebconfig;","import React from 'react';\nimport { EasybaseProvider, useEasybase } from 'easybase-react';\nimport ebconfig from './ebconfig';\nimport { Line } from 'react-chartjs-2';\n\nclass AppDB extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      accessToken: null,\n      results: [],\n    };\n  }\n\n// Email and password as payload & token saved\n  componentDidMount() {\n    const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwiZW1haWwiOiJ5b3VyLmVtYWlsQGFkZHJlc3MiLCJpYXQiOjE2Mjk5NzkwMjR9.uzS7XcottgqwdlxK7BUu3QhBv0M37mZVMUK2XIyRIxY';\n    const payload = { \n      \"email\": \"your.email@address\", \n      \"password\": \"yourselectedpassword\" \n  };\n\n// JSON POST request for Authorisation\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(payload)\n  };\n\n// JSON POST request for Array data\n  const requestData = {\n    method: 'GET',\n    headers: { 'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + token },\n  };\n\n// // Signup for accessToken\n  fetch('https://opendata.hopefully.works/api/signup', requestOptions)\n      .then(response => response.json())\n      .then(data => this.setState({ accessToken: data.accessToken }));\n\n// // Login with credentials and retreive accessToken\n  fetch('https://opendata.hopefully.works/api/login', requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ accessToken: data.accessToken })});\n\n\n// // Fetch data if authorised\n  fetch('https://opendata.hopefully.works/api/events', requestData)\n  .then(response => response.json())\n  .then(data => this.setState({ results: data }))}\n\n  render()\n  {\n    const { accessToken } = this.state;\n    const { results } = this.state;\n    // Graph data and styling\n    const data = {\n      labels: ['Sensor 1', 'Sensor 2', 'Sensor 3', 'Sensor 4'],\n      datasets: [\n        {\n          label: results.date,\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: [results.sensor1, results.sensor2, results.sensor3, results.sensor4]\n        }\n      ]\n    };\n    return(\n      <div>\n        {/* Current API information */}\n        <h1 style={{ textAlign: 'center' }}>Sensor Data</h1>\n        {/* <p>The request returned -  {accessToken} </p> */}\n        <h3 style={{ fontWeight: 'normal' }}>Date - <b>{results.date}</b></h3>\n        <h5 style={{ fontWeight: 'normal' }}>Sensor 1 - <b>{results.sensor1}</b></h5>\n        <h5 style={{ fontWeight: 'normal' }}>Sensor 2 - <b>{results.sensor2}</b></h5>\n        <h5 style={{ fontWeight: 'normal' }}>Sensor 3 - <b>{results.sensor3}</b></h5>\n        <h5 style={{ fontWeight: 'normal' }}>Sensor 4 - <b>{results.sensor4}</b></h5>\n          {/* Graph for current sensor data */}\n        <Line data={data} />\n      </div>\n    )\n  }\n}\n\n// Database compiling\nfunction App() {\n  return (\n    <EasybaseProvider ebconfig={ebconfig}>\n      <DbResults />\n    </EasybaseProvider>\n  );\n}\n\n// Historical data on cards\nfunction Card({ date, sensor1, sensor2, sensor3, sensor4 }) {\n  const cardStyle = {\n    labels: ['Sensor 1', 'Sensor 2', 'Sensor 3', 'Sensor 4'],\n    datasets: [\n      {\n        label: date,\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgb(63, 127, 191)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: [sensor1, sensor2, sensor3, sensor4]\n      }\n    ]\n  };\n\n  return (\n    <div style={cardStyle}>\n      <h3 style={{ fontWeight: 'normal' }}><b>{date}</b></h3>\n      <h5 style={{ fontWeight: 'normal' }}>Sensor 1: <b>{sensor1}</b></h5>\n      <h5 style={{ fontWeight: 'normal' }}>Sensor 2: <b>{sensor2}</b></h5>\n      <h5 style={{ fontWeight: 'normal' }}>Sensor 3: <b>{sensor3}</b></h5>\n      <h5 style={{ fontWeight: 'normal' }}>Sensor 4: <b>{sensor4}</b></h5>\n        <Line data={cardStyle} />\n    </div>\n  )\n}\n\n// Fetching and sending data to and from database\nfunction DbResults() {\n\n  const { db, useReturn, e } = useEasybase();\n\n  const { frame } = useReturn(() => {\n      return db('SENSOR-DATA').return()\n  })\n\n  const insertRecord = async () => {\n    try {\n      const inDate = prompt(\"Please enter the Date\", \"2021-08-27T10:00:00.000Z\");\n      const inSensor1 = prompt(\"Please enter the data for Sensor 1\", \"59\");\n      const inSensor2 = prompt(\"Please enter the data for Sensor 2\", \"12\");\n      const inSensor3 = prompt(\"Please enter the data for Sensor 3\", \"95\");\n      const inSensor4 = prompt(\"Please enter the data for Sensor 4\", \"590\");\n      \n      if (!inDate || !inSensor1 || !inSensor2 || !inSensor3 || !inSensor4) return;\n\n      await db('SENSOR-DATA').insert({\n        date: inDate,\n        sensor1: inSensor1,\n        sensor2: inSensor2,\n        sensor3: inSensor3,\n        sensor4: inSensor4,\n\n      }).one();\n    } catch (_) {\n      alert(\"Error on input format\")\n    }\n  }\n  \n  return (\n    <div>\n      <button style={{  position: 'fixed',\n                right: 5,\n                top: 5, \n                width: \"80px\",\n                margin: 20,\n                padding: 10,\n                borderRadius: 100,\n                backgroundColor: 'rgba(110, 236, 236, 0.5)' }} \n                onClick={insertRecord}>\n                + Add Record\n        </button>\n\n      <div style={{ marginLeft: 130, marginRight: 130, marginTop: 30 }}>\n      <AppDB/>         \n      </div>\n\n      <h1 style={{ textAlign: 'center', margin: 30 }}>Historical Data:</h1>\n        <div style={{ marginLeft: 130, \n                      marginRight: 130, \n                      marginBottom: 30 }}>\n        <div style={{ display: \"grid\", \n                      gridTemplateColumns: \"repeat(3, 1fr)\", \n                      gridGap: 20 }}>\n          {frame.map(ele => <Card {...ele} />)}\n        </div>\n        </div>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}